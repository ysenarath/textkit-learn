from typing import Any, ClassVar

BINARY_TAIL: int
DEFAULT_CACHE: int
DEFAULT_NUM_TRIES: int
DEFAULT_ORDER: int
DEFAULT_TAIL: int
HUGE_CACHE: int
LABEL_ORDER: int
LARGE_CACHE: int
MAX_NUM_TRIES: int
MIN_NUM_TRIES: int
NORMAL_CACHE: int
SMALL_CACHE: int
TEXT_TAIL: int
TINY_CACHE: int
WEIGHT_ORDER: int
__test__: dict

class BinaryTrie(_Trie):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def get(self, byteskey, default=...) -> Any: ...
    def items(self, bytesprefix=...) -> Any: ...
    def iter_prefixes(self, byteskey) -> Any: ...
    def iteritems(self, bytesprefix=...) -> Any: ...
    def key_id(self, byteskey) -> int: ...
    def prefixes(self, byteskey) -> Any: ...
    def restore_key(self, intindex) -> Any: ...
    def __getitem__(self, index): ...

class BytesTrie(_UnicodeKeyedTrie):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(
        self, arg=..., bytesvalue_separator=..., **options
    ) -> Any: ...
    def b_get_value(self, byteskey) -> list: ...
    def get(self, key, default=...) -> Any: ...
    def get_value(self, unicodekey) -> list: ...
    def items(self, unicodeprefix=...) -> list: ...
    def iteritems(self, unicodeprefix=...) -> Any: ...
    def iterkeys(self, unicodeprefix=...) -> Any: ...
    def keys(self, prefix=...) -> list: ...
    def prefixes(self, unicodekey) -> list: ...
    def __getitem__(self, index): ...

class RecordTrie(_UnpackTrie):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, fmt, arg=..., **options) -> Any: ...
    def __reduce__(self) -> Any: ...

class Trie(_UnicodeKeyedTrie):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def get(self, key, default=...) -> Any: ...
    def items(self, unicodeprefix=...) -> Any: ...
    def iter_prefixes(self, unicodekey) -> Any: ...
    def iter_prefixes_with_ids(self, unicodekey) -> Any: ...
    def iteritems(self, unicodeprefix=...) -> Any: ...
    def key_id(self, unicodekey) -> int: ...
    def prefixes(self, unicodekey) -> Any: ...
    def restore_key(self, intindex) -> Any: ...
    def __getitem__(self, index): ...

class _Trie:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(
        self,
        arg=...,
        num_tries=...,
        binary=...,
        cache_size=...,
        order=...,
        weights=...,
    ) -> Any: ...
    def frombytes(self, bytesdata) -> Any: ...
    def has_keys_with_prefix(self, prefix=...) -> Any: ...
    def iterkeys(self, prefix=...) -> Any: ...
    def keys(self, prefix=...) -> list: ...
    def load(self, path) -> Any: ...
    def map(self, buffer) -> Any: ...
    def mmap(self, path) -> Any: ...
    def read(self, f) -> Any: ...
    def save(self, path) -> Any: ...
    def tobytes(self) -> bytes: ...
    def write(self, f) -> Any: ...
    def __contains__(self, other) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iter__(self): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self) -> Any: ...

class _UnicodeKeyedTrie(_Trie):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class _UnpackTrie(BytesTrie):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, arg=..., **options) -> Any: ...
    def b_get_value(self, byteskey) -> list: ...
    def items(self, unicodeprefix=...) -> list: ...
    def iteritems(self, unicodeprefix=...) -> Any: ...
